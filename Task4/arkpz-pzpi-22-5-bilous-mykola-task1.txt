ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра «Програмної інженерії»


ЗВІТ
з лабораторної роботи  № 4
з дисципліни «Аналіз та рефакторінг коду»



Виконав					                 Прийняв: Дашенков Д. С.
ст. гр. ПЗПІ-22-5
Білоус Микола Олексійович







Харків 2024


 
4. РОЗРОБКА IoT КЛІЄНТА (БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ НАЛАШТУВАННЯ)

4.1 Мета: розробити програмне забезпечення для IoT або SmartDevice пристрою, створеного на базі будь-якої поширеної на сьогодні платформи, придатної для реалізації вбудованих систем (Embedded System).

4.2 Хід роботи:
4.2.1. Розробити будову програмного забезпечення ІоТ клієнта. 
Розпочнемо з розробки архітектури IoT клієнта для керування електронним замком на базі ESP32.
1. Будова програмного забезпечення IoT клієнта:

IoT Client (ESP32)
├── Core
│   ├── WiFi Manager - управління підключенням до мережі
│   ├── MQTT Client - комунікація з сервером
│   └── Configuration Manager - управління налаштуваннями
│
├── Security
│   ├── QR Scanner - обробка QR кодів
│   ├── Token Validator - валідація токенів доступу
│   └── Access Controller - контроль доступу
│
├── Hardware Control
│   ├── Lock Controller - управління замком
│   ├── LED Controller - індикація стану
│   └── Sensors Manager - моніторинг стану
│
└── Business Logic
    ├── State Manager - управління станом пристрою
    ├── Command Processor - обробка команд
    └── Event Handler - обробка подій

Основні компоненти:
1. Core Components:
   - WiFi Manager: підключення до мережі та управління з'єднанням
   - MQTT Client: комунікація з сервером через MQTT протокол
   - Configuration Manager: зберігання та управління налаштуваннями
2. Security Components:
   - QR Scanner: зчитування та валідація QR кодів
   - Token Validator: перевірка токенів доступу
   - Access Controller: управління правами доступу
3. Hardware Control:
   - Lock Controller: безпосереднє управління електронним замком
   - LED Controller: управління LED індикацією для відображення стану
   - Sensors Manager: моніторинг стану замка та інших сенсорів
Технічні специфікації:
1. Hardware:
   - ESP32 (з вбудованим WiFi та Bluetooth)
   - Електронний замок (соленоїд або сервопривід)
   - LED індикатори стану
   - Датчики стану дверей
2. Комунікація:
   - WiFi для підключення до мережі
   - MQTT протокол для обміну повідомленнями
   - HTTP для початкової конфігурації
3. Безпека:
   - SSL/TLS шифрування
   - Токени доступу
   - Захищене зберігання налаштувань

4.2.2. Створити UML діаграму прецедентів для ІоТ клієнта. 
 
4.2.3. Розробити бізнес логіку (математичну обробку повʼязаних із предметною областю даних) та функції налаштування ІоТ клієнта.
 Business Logic:
   - State Manager: управління станом пристрою
   - Command Processor: обробка команд від сервера
   - Event Handler: обробка подій та відправка статусів
4.2.4. Створити діаграму діяльності для ІоТ клієнта. 
 
4.2.5. Створити програмну реалізацію бізнес логіки та функцій налаштування ІоТ клієнта
Повна структура програмної реалізації для IoT клієнта:
iot-client/
├── src/
│   ├── main.cpp                    # Головний файл програми
│   ├── config/
│   │   ├── config.h                # Структури конфігурації
│   │   ├── credentials.h           # Налаштування підключення
│   │   └── pins.h                  # Конфігурація пінів ESP32
│   │
│   ├── core/
│   │   ├── wifi_manager.h          # Управління WiFi
│   │   ├── wifi_manager.cpp
│   │   ├── mqtt_manager.h          # Управління MQTT
│   │   ├── mqtt_manager.cpp
│   │   ├── config_manager.h        # Управління налаштуваннями
│   │   └── config_manager.cpp
│   │
│   ├── controllers/
│   │   ├── lock_controller.h       # Управління замком
│   │   ├── lock_controller.cpp
│   │   ├── led_controller.h        # Управління індикацією
│   │   └── led_controller.cpp
│   │
│   ├── security/
│   │   ├── access_control.h        # Контроль доступу
│   │   ├── access_control.cpp
│   │   ├── token_validator.h       # Валідація токенів
│   │   └── token_validator.cpp
│   │
│   ├── models/
│   │   ├── device_state.h          # Стан пристрою
│   │   ├── command.h               # Структури команд
│   │   ├── telemetry.h            # Структури телеметрії
│   │   └── error_codes.h          # Коди помилок
│   │
│   ├── services/
│   │   ├── command_processor.h     # Обробка команд
│   │   ├── command_processor.cpp
│   │   ├── telemetry_service.h    # Сервіс телеметрії
│   │   └── telemetry_service.cpp
│   │
│   └── utils/
│       ├── json_helper.h           # Допоміжні функції JSON
│       ├── json_helper.cpp
│       ├── logger.h                # Логування
│       └── logger.cpp
│
├── include/                        # Зовнішні бібліотеки
│   └── README.md
│
├── lib/                           # Власні бібліотеки
│   └── README.md
│
├── test/                          # Тести
│   ├── test_main.cpp
│   ├── test_lock_controller.cpp
│   └── test_command_processor.cpp
│
├── platformio.ini                  # Конфігурація PlatformIO
├── README.md                      # Документація проекту
└── .gitignore
Опис основних компонентів:
1. src/config/:
   - Конфігураційні файли
   - Налаштування пінів
   - Облікові дані для підключення
2. src/core/:
   - Базові компоненти системи
   - Управління мережею
   - Управління конфігурацією
3. src/controllers/:
   - Контролери для управління обладнанням
   - Взаємодія з фізичними компонентами
4. src/security/:
   - Компоненти безпеки
   - Валідація доступу
   - Обробка токенів
5. src/models/:
   - Структури даних
   - Моделі стану
   - Визначення типів
6. src/services/:
   - Бізнес-логіка
   - Обробка команд
   - Збір та відправка даних
7. src/utils/:
   - Допоміжні функції
   - Логування
   - Обробка JSON
8. test/:
   - Модульні тести
   - Тестові сценарії
Додаткові файли:
- platformio.ini: налаштування збірки та залежностей
- README.md: документація проекту
- .gitignore: налаштування Git

4.3 Висновки: під час лабораторної роботи було розроблено програмне забезпечення для IoT пристрою, створеного на базі ESP32.

