ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра «Програмної інженерії»


ЗВІТ
з лабораторної роботи  № 3
з дисципліни «Аналіз та рефакторінг коду»



Виконав					                 Прийняв: Дашенков Д. С.
ст. гр. ПЗПІ-22-5
Білоус Микола Олексійович







Харків 2024


 
3. РОЗРОБКА БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ АДМІНІСТРУВАННЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ

3.1 Мета: розробити бізнес-логику та функції адміністрування серверної частини програмної системи

3.2 Хід роботи:
3.2.1. Розробити бізнес логіку серверної частини програмної системи. 
Створимо спочатку UML діаграму діяльності для серверної частини, яка покаже основні процеси системи:
 
Тепер створимо UML діаграму взаємодії (sequence diagram) для основних процесів системи:
 
Діаграма діяльності (Activity Diagram) показує:
1.	Основні процеси авторизації
2.	Обробку замовлень
3.	Управління пристроями
4.	Платіжні операції
5.	Зв'язки між процесами та умови їх виконання
Діаграма взаємодії (Sequence Diagram) демонструє:
1.	Взаємодію між компонентами системи
2.	Послідовність операцій при створенні та виконанні замовлення
3.	Процес комунікації з IoT пристроями
4.	Обробку платежів
5.	Моніторинг виконання замовлення
Обидві діаграми відображають асинхронну природу операцій та складну взаємодію між різними сервісами системи.

3.2.2. Розробити функції адміністрування серверної частини програмної системи. 
Поточна структура проекту має наступні основні модулі:
•	Auth: Автентифікація та авторизація
•	Users: Управління користувачами
•	Devices: Управління вендинговими машинами та IoT
•	Orders: Управління замовленнями
•	Payments: Управління платежами
Додамо нові модулі та компоненти для покращення адміністрування та бізнес-логіки:
1.	Admin Module:
•	Панель управління для адміністраторів
•	Генерація звітів
•	Управління системними налаштуваннями
2.	Monitoring Module:
•	Моніторинг стану системи
•	Сповіщення про проблеми
•	Збір метрик
3.	Analytics Module:
•	Аналіз даних про використання
•	Статистика замовлень
•	Аналітика продуктивності
4.	Notifications Module:
•	Відправка email повідомлень
•	Push-сповіщення
•	Шаблони повідомлень
5.	Scheduler Module:
•	Планування технічного обслуговування
•	Автоматична генерація звітів
•	Періодичні завдання
6.	Аналітичний модуль (AnalyticsModule): 
•	Аналіз замовлень
•	Аналіз роботи машин
•	Аналіз доходів
•	Прогнозування
7.	Система сповіщень (NotificationsModule): 
•	Обробка подій системи
•	Відправка email-сповіщень
•	Відправка push-сповіщень
•	Сповіщення адміністраторів

3.2.3. Створити програмну реалізацію бізнес логіки та функцій адміністрування серверної частини
Розглянемо особливості програмної реалізації бізнес логіки та функцій адміністрування серверної частини системи:
1. Бізнес логіка:
A. Модуль керування вендинговими машинами (VendingMachinesModule):
- Відстеження стану кожної машини в реальному часі
- Управління конфігурацією принтерів
- Обробка команд для електронних замків
- Збір телеметрії з пристроїв
B. Модуль обробки замовлень (OrdersModule):
- Прийом та валідація замовлень
- Перевірка доступності машини
- Розрахунок вартості
- Відстеження статусу виконання
C. Платіжний модуль (PaymentsModule):
- Обробка платежів
- Управління балансами користувачів
- Історія транзакцій
- Повернення коштів
2. Функції адміністрування:
A. Адміністративний модуль (AdminModule):
- Панель управління системою
- Моніторинг роботи обладнання
- Генерація звітів
- Управління користувачами
B. Модуль моніторингу (MonitoringModule):
- Збір метрик системи
- Відстеження помилок
- Сповіщення про проблеми
- Аналіз продуктивності
C. Аналітичний модуль (AnalyticsModule):
- Збір статистики використання
- Аналіз поведінки користувачів
- Прогнозування навантаження
- Рекомендації з оптимізації
Основні архітектурні особливості:
1. Модульність:
- Кожен модуль є незалежним
- Чіткі інтерфейси взаємодії
- Можливість незалежного масштабування
- Спрощене тестування
2. Безпека:
- JWT автентифікація
- Розподіл ролей та прав
- Захищені API ендпоінти
- Валідація вхідних даних
3. Масштабованість:
- Асинхронна обробка запитів
- Кешування даних
- Балансування навантаження
- Горизонтальне масштабування
4. Моніторинг:
- Логування подій
- Збір метрик
- Сповіщення про помилки
- Аналіз продуктивності
5. Інтеграція:
- MQTT для IoT комунікації
- REST API для клієнтських додатків
- WebSocket для реального часу
- Платіжні системи
Технології та інструменти:
1. Backend:
- NestJS фреймворк
- TypeORM для роботи з БД
- PostgreSQL для зберігання даних
- Redis для кешування
2. Комунікація:
- MQTT брокер
- REST API
- WebSocket
- JWT tokens
3. Моніторинг:
- ELK Stack
- Prometheus
4. Тестування:
- Jest для unit тестів
- Supertest для e2e тестів
- Mock об'єкти
- Тестові бази даних
Ця архітектура забезпечує:
- Надійність роботи системи
- Легкість масштабування
- Простоту підтримки
- Ефективний моніторинг
- Безпеку даних
3.3 Висновки: під час лабораторної роботи були розроблені бізнес-логика та функції адміністрування серверної частини програмної системи.
